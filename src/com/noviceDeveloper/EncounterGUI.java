package com.noviceDeveloper;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Richard Webb
 */
public class EncounterGUI extends javax.swing.JFrame {

    private ResultSet rs;
    private int curRow = 0;
    private String pass = "";

    /**
     * Creates new form EncounterGUI
     */
    public EncounterGUI() {
        initComponents();



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateEncounterDialog = new javax.swing.JDialog();
        uMinRoll = new javax.swing.JTextField();
        uMaxRoll = new javax.swing.JTextField();
        uName = new javax.swing.JTextField();
        uNotes = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        uUpdateEncounter = new javax.swing.JButton();
        uDeleteEncounter = new javax.swing.JButton();
        uForwardButton = new javax.swing.JButton();
        uBackButton = new javax.swing.JButton();
        uOkButton = new javax.swing.JButton();
        uSaveEncounter = new javax.swing.JButton();
        uCancelEncounter = new javax.swing.JButton();
        uAddEncounter = new javax.swing.JButton();
        pathfinderDialog = new javax.swing.JDialog();
        pName = new javax.swing.JTextField();
        pCR = new javax.swing.JTextField();
        pAlignment = new javax.swing.JTextField();
        pType = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        pForwardButton = new javax.swing.JButton();
        pBackButton = new javax.swing.JButton();
        pOkButton = new javax.swing.JButton();
        pEnvior = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        pLink = new javax.swing.JTextField();
        pSearch = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        customCreatureDialog = new javax.swing.JDialog();
        cName = new javax.swing.JTextField();
        cCR = new javax.swing.JTextField();
        cAlignment = new javax.swing.JTextField();
        cType = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        cForwardButton = new javax.swing.JButton();
        cBackButton = new javax.swing.JButton();
        cOkButton = new javax.swing.JButton();
        cEnvior = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        cSearch = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        cAddCreature = new javax.swing.JButton();
        cDeleteCreature = new javax.swing.JButton();
        cUpdateCreature = new javax.swing.JButton();
        cSaveCreature = new javax.swing.JButton();
        cCancelCreature = new javax.swing.JButton();
        saveFileDialog = new javax.swing.JDialog();
        saveFile = new javax.swing.JFileChooser();
        listTablesDialog = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        randomTablesListArea = new javax.swing.JTextArea();
        listOkayButton = new javax.swing.JButton();
        databaseDialog = new javax.swing.JDialog();
        databasePassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        passwordOk = new javax.swing.JButton();
        passwordCancel = new javax.swing.JButton();
        tableName = new javax.swing.JTextField();
        tableNameLabel = new javax.swing.JLabel();
        dieRollLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        notesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        nameOutput = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesOutput = new javax.swing.JTextArea();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        TableMenu = new javax.swing.JMenu();
        listTables = new javax.swing.JMenuItem();
        listRandomTable = new javax.swing.JMenuItem();
        addRandomTable = new javax.swing.JMenuItem();
        deleteRandomTable = new javax.swing.JMenuItem();
        convertPdf = new javax.swing.JMenuItem();
        encounterMenu = new javax.swing.JMenu();
        updateEncounterButton = new javax.swing.JMenuItem();
        lookupCreatureButton = new javax.swing.JMenu();
        listPathfinder = new javax.swing.JMenuItem();
        customCreatureMenu = new javax.swing.JMenuItem();
        quitButton = new javax.swing.JMenu();
        quitMenu = new javax.swing.JMenuItem();

        updateEncounterDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        updateEncounterDialog.setTitle("Encounter");
        updateEncounterDialog.setAlwaysOnTop(true);
        updateEncounterDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateEncounterDialog.setMinimumSize(new java.awt.Dimension(400, 450));
        updateEncounterDialog.setResizable(false);
        updateEncounterDialog.setLocationRelativeTo(null);
        updateEncounterDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                updateEncounterDialogWindowClosing(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel6.setText("Encounters");

        jLabel7.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel7.setText("Min Die Roll");

        jLabel8.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel8.setText("Max Die Roll");

        jLabel9.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel9.setText("Name");

        jLabel10.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel10.setText("Notes");

        uUpdateEncounter.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uUpdateEncounter.setText("Update");
        uUpdateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uUpdateEncounterActionPerformed(evt);
            }
        });

        uDeleteEncounter.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uDeleteEncounter.setText("Delete");
        uDeleteEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uDeleteEncounterActionPerformed(evt);
            }
        });

        uForwardButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uForwardButton.setText("Forward");
        uForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uForwardButtonActionPerformed(evt);
            }
        });

        uBackButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uBackButton.setText("Back");
        uBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uBackButtonActionPerformed(evt);
            }
        });

        uOkButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uOkButton.setText("Ok");
        uOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uOkButtonActionPerformed(evt);
            }
        });

        uSaveEncounter.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uSaveEncounter.setText("Save ");
        uSaveEncounter.setEnabled(false);
        uSaveEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uSaveEncounterActionPerformed(evt);
            }
        });

        uCancelEncounter.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uCancelEncounter.setText("Cancel");
        uCancelEncounter.setEnabled(false);
        uCancelEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uCancelEncounterActionPerformed(evt);
            }
        });

        uAddEncounter.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        uAddEncounter.setText("Add");
        uAddEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uAddEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateEncounterDialogLayout = new javax.swing.GroupLayout(updateEncounterDialog.getContentPane());
        updateEncounterDialog.getContentPane().setLayout(updateEncounterDialogLayout);
        updateEncounterDialogLayout.setHorizontalGroup(
            updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateEncounterDialogLayout.createSequentialGroup()
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateEncounterDialogLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(uSaveEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uCancelEncounter))
                    .addGroup(updateEncounterDialogLayout.createSequentialGroup()
                        .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(uMinRoll, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                            .addComponent(uMaxRoll))
                        .addGap(18, 18, 18)
                        .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)))
                    .addGroup(updateEncounterDialogLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(uUpdateEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(uDeleteEncounter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uAddEncounter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uOkButton))
                    .addGroup(updateEncounterDialogLayout.createSequentialGroup()
                        .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(uForwardButton)
                            .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(uName)
                                .addComponent(uNotes, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))))
                .addContainerGap(74, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updateEncounterDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(uBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        updateEncounterDialogLayout.setVerticalGroup(
            updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateEncounterDialogLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uMinRoll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uMaxRoll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uNotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(30, 30, 30)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uForwardButton)
                    .addComponent(uBackButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uUpdateEncounter)
                    .addComponent(uDeleteEncounter)
                    .addComponent(uAddEncounter)
                    .addComponent(uOkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(updateEncounterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uCancelEncounter)
                    .addComponent(uSaveEncounter))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pathfinderDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        pathfinderDialog.setTitle("Pathfinder Bestiary");
        pathfinderDialog.setAutoRequestFocus(false);
        pathfinderDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pathfinderDialog.setMinimumSize(new java.awt.Dimension(800, 450));
        pathfinderDialog.setResizable(false);
        pathfinderDialog.setLocationRelativeTo(null);
        pathfinderDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                pathfinderDialogWindowClosing(evt);
            }
        });

        pName.setEditable(false);

        pCR.setEditable(false);

        pAlignment.setEditable(false);

        pType.setEditable(false);

        jLabel11.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel11.setText("Pathfinder Bestiary");

        jLabel12.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel12.setText("Name:");

        jLabel13.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel13.setText("CR:");

        jLabel14.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel14.setText("Alignment");

        jLabel15.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel15.setText("Creature Type:");

        pForwardButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        pForwardButton.setText("Forward");
        pForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pForwardButtonActionPerformed(evt);
            }
        });

        pBackButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        pBackButton.setText("Back");
        pBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pBackButtonActionPerformed(evt);
            }
        });

        pOkButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        pOkButton.setText("Ok");
        pOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pOkButtonActionPerformed(evt);
            }
        });

        pEnvior.setEditable(false);

        jLabel16.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel16.setText("Enviorment:");

        jLabel17.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel17.setText("Link to PRD: ");

        pLink.setEditable(false);
        pLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pLinkMouseClicked(evt);
            }
        });

        pSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pSearchActionPerformed(evt);
            }
        });

        jLabel18.setText("Search");

        javax.swing.GroupLayout pathfinderDialogLayout = new javax.swing.GroupLayout(pathfinderDialog.getContentPane());
        pathfinderDialog.getContentPane().setLayout(pathfinderDialogLayout);
        pathfinderDialogLayout.setHorizontalGroup(
            pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathfinderDialogLayout.createSequentialGroup()
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pathfinderDialogLayout.createSequentialGroup()
                        .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pEnvior, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pLink, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pathfinderDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pathfinderDialogLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(58, 58, 58)
                                .addComponent(pSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18))
                            .addGroup(pathfinderDialogLayout.createSequentialGroup()
                                .addComponent(pForwardButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pOkButton))))
                    .addGroup(pathfinderDialogLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pType, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pathfinderDialogLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pCR, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pathfinderDialogLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pathfinderDialogLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        pathfinderDialogLayout.setVerticalGroup(
            pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pathfinderDialogLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(pSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(38, 38, 38)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(pCR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(pEnvior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(pLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(pathfinderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pBackButton)
                    .addComponent(pForwardButton)
                    .addComponent(pOkButton))
                .addGap(98, 98, 98))
        );

        pathfinderDialog.getAccessibleContext().setAccessibleDescription("");

        customCreatureDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        customCreatureDialog.setTitle("Custom Creature");
        customCreatureDialog.setAlwaysOnTop(true);
        customCreatureDialog.setAutoRequestFocus(false);
        customCreatureDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        customCreatureDialog.setMinimumSize(new java.awt.Dimension(800, 450));
        customCreatureDialog.setResizable(false);
        customCreatureDialog.setLocationRelativeTo(null);
        customCreatureDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                customCreatureDialogWindowClosing(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel19.setText("Custom Creature");

        jLabel20.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel20.setText("Name:");

        jLabel21.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel21.setText("CR:");

        jLabel22.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel22.setText("Alignment");

        jLabel23.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel23.setText("Creature Type:");

        cForwardButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cForwardButton.setText("Forward");
        cForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cForwardButtonActionPerformed(evt);
            }
        });

        cBackButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cBackButton.setText("Back");
        cBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBackButtonActionPerformed(evt);
            }
        });

        cOkButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cOkButton.setText("Ok");
        cOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cOkButtonActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel24.setText("Enviorment:");

        cSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSearchActionPerformed(evt);
            }
        });

        jLabel26.setText("Search");

        cAddCreature.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cAddCreature.setText("Add Creature");
        cAddCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cAddCreatureActionPerformed(evt);
            }
        });

        cDeleteCreature.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cDeleteCreature.setText("Delete Creature");
        cDeleteCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDeleteCreatureActionPerformed(evt);
            }
        });

        cUpdateCreature.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cUpdateCreature.setText("Update Creature");
        cUpdateCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cUpdateCreatureActionPerformed(evt);
            }
        });

        cSaveCreature.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cSaveCreature.setText("Save Creature");
        cSaveCreature.setEnabled(false);
        cSaveCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSaveCreatureActionPerformed(evt);
            }
        });

        cCancelCreature.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        cCancelCreature.setText("Cancel Creature");
        cCancelCreature.setEnabled(false);
        cCancelCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cCancelCreatureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customCreatureDialogLayout = new javax.swing.GroupLayout(customCreatureDialog.getContentPane());
        customCreatureDialog.getContentPane().setLayout(customCreatureDialogLayout);
        customCreatureDialogLayout.setHorizontalGroup(
            customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customCreatureDialogLayout.createSequentialGroup()
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customCreatureDialogLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(12, 12, 12)
                        .addComponent(cEnvior, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customCreatureDialogLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cCR, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customCreatureDialogLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customCreatureDialogLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customCreatureDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(customCreatureDialogLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(58, 58, 58)
                                .addComponent(cSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26))
                            .addGroup(customCreatureDialogLayout.createSequentialGroup()
                                .addComponent(cAddCreature)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cDeleteCreature)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cUpdateCreature))))
                    .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(customCreatureDialogLayout.createSequentialGroup()
                            .addComponent(cForwardButton)
                            .addGap(18, 18, 18)
                            .addComponent(cBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(17, 17, 17)
                            .addComponent(cOkButton))
                        .addGroup(customCreatureDialogLayout.createSequentialGroup()
                            .addComponent(jLabel23)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cType, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(customCreatureDialogLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(cSaveCreature)
                        .addGap(18, 18, 18)
                        .addComponent(cCancelCreature)))
                .addContainerGap(288, Short.MAX_VALUE))
        );
        customCreatureDialogLayout.setVerticalGroup(
            customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customCreatureDialogLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(cSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addGap(38, 38, 38)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(cCR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cAlignment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(cEnvior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cForwardButton)
                    .addComponent(cBackButton)
                    .addComponent(cOkButton))
                .addGap(15, 15, 15)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cDeleteCreature)
                    .addComponent(cAddCreature)
                    .addComponent(cUpdateCreature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(customCreatureDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cSaveCreature)
                    .addComponent(cCancelCreature))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        saveFileDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        saveFileDialog.setTitle("Save PDF File");
        saveFileDialog.setMinimumSize(new java.awt.Dimension(700, 400));
        saveFileDialog.setLocationRelativeTo(null);

        saveFile.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveFile.setMinimumSize(new java.awt.Dimension(600, 400));

        javax.swing.GroupLayout saveFileDialogLayout = new javax.swing.GroupLayout(saveFileDialog.getContentPane());
        saveFileDialog.getContentPane().setLayout(saveFileDialogLayout);
        saveFileDialogLayout.setHorizontalGroup(
            saveFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 606, Short.MAX_VALUE)
            .addGroup(saveFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveFileDialogLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        saveFileDialogLayout.setVerticalGroup(
            saveFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 399, Short.MAX_VALUE)
            .addGroup(saveFileDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveFileDialogLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        listTablesDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        listTablesDialog.setTitle("List of Random Tables");
        listTablesDialog.setAlwaysOnTop(true);
        listTablesDialog.setMinimumSize(new java.awt.Dimension(210, 300));
        listTablesDialog.setLocationRelativeTo(null);

        randomTablesListArea.setEditable(false);
        randomTablesListArea.setColumns(20);
        randomTablesListArea.setFont(new java.awt.Font("Papyrus", 1, 13)); // NOI18N
        randomTablesListArea.setRows(5);
        jScrollPane4.setViewportView(randomTablesListArea);

        listOkayButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        listOkayButton.setText("Okay");
        listOkayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listOkayButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listTablesDialogLayout = new javax.swing.GroupLayout(listTablesDialog.getContentPane());
        listTablesDialog.getContentPane().setLayout(listTablesDialogLayout);
        listTablesDialogLayout.setHorizontalGroup(
            listTablesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listTablesDialogLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(listTablesDialogLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(listOkayButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        listTablesDialogLayout.setVerticalGroup(
            listTablesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listTablesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listOkayButton)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        databaseDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        databaseDialog.setTitle("Enter Password");
        databaseDialog.setFocusable(false);
        databaseDialog.setMinimumSize(new java.awt.Dimension(200, 200));
        databaseDialog.setLocationRelativeTo(null);
        databaseDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                databaseDialogWindowClosing(evt);
            }
        });

        databasePassword.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N

        jLabel1.setText("Enter Your Password");

        passwordOk.setText("Ok");
        passwordOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordOkActionPerformed(evt);
            }
        });

        passwordCancel.setText("Cancel");
        passwordCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databaseDialogLayout = new javax.swing.GroupLayout(databaseDialog.getContentPane());
        databaseDialog.getContentPane().setLayout(databaseDialogLayout);
        databaseDialogLayout.setHorizontalGroup(
            databaseDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseDialogLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(databaseDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(databasePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(databaseDialogLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(passwordOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(passwordCancel)
                .addGap(20, 20, 20))
        );
        databaseDialogLayout.setVerticalGroup(
            databaseDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseDialogLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databasePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(databaseDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordOk)
                    .addComponent(passwordCancel))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EncounterPlus -- A Pathfinder Random Table Generator");
        setAutoRequestFocus(false);
        setPreferredSize(new java.awt.Dimension(1024, 800));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tableName.setEditable(false);
        tableName.setFont(new java.awt.Font("Papyrus", 1, 12)); // NOI18N

        tableNameLabel.setFont(new java.awt.Font("Papyrus", 1, 12)); // NOI18N
        tableNameLabel.setText("Table Name");

        dieRollLabel.setFont(new java.awt.Font("Papyrus", 1, 12)); // NOI18N
        dieRollLabel.setText("Die Roll");

        nameLabel.setFont(new java.awt.Font("Papyrus", 1, 12)); // NOI18N
        nameLabel.setText("Name");

        notesLabel.setFont(new java.awt.Font("Papyrus", 1, 12)); // NOI18N
        notesLabel.setText("Notes");

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setFont(new java.awt.Font("Papyrus", 1, 13)); // NOI18N
        outputArea.setLineWrap(true);
        outputArea.setRows(5);
        outputArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(outputArea);

        nameOutput.setEditable(false);
        nameOutput.setColumns(20);
        nameOutput.setFont(new java.awt.Font("Papyrus", 1, 13)); // NOI18N
        nameOutput.setLineWrap(true);
        nameOutput.setRows(5);
        nameOutput.setWrapStyleWord(true);
        jScrollPane2.setViewportView(nameOutput);

        notesOutput.setEditable(false);
        notesOutput.setColumns(20);
        notesOutput.setFont(new java.awt.Font("Papyrus", 1, 13)); // NOI18N
        notesOutput.setRows(5);
        jScrollPane3.setViewportView(notesOutput);

        jLabel25.setFont(new java.awt.Font("Papyrus", 3, 10)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText("<html><p>This program uses trademarks and/or copyrights owned by Paizo Publishing, LLC, which are used under Paizo's Community Use Policy. We are expressly prohibited from charging you to use or access this content. This program is not published, endorsed, or specifically approved by Paizo Publishing. For more information about Paizo's Community Use Policy, please visit paizo.com/communityuse. For more information about Paizo Publishing and Paizo products, please visit paizo.com.</p></html>");
        jLabel25.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel27.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel27.setText("<html> <p>EncounterPlus -- A Random Encounter Table Maker</p> <p>&nbsp&nbsp&nbsp By Richard Webb </p></html>");

        TableMenu.setText("Table");
        TableMenu.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N

        listTables.setText("List Random Tables");
        listTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listTablesActionPerformed(evt);
            }
        });
        TableMenu.add(listTables);

        listRandomTable.setText("Load Random Table");
        listRandomTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRandomTableActionPerformed(evt);
            }
        });
        TableMenu.add(listRandomTable);

        addRandomTable.setText("Add Random Table");
        addRandomTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRandomTableActionPerformed(evt);
            }
        });
        TableMenu.add(addRandomTable);

        deleteRandomTable.setText("Delete Random Table");
        deleteRandomTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRandomTableActionPerformed(evt);
            }
        });
        TableMenu.add(deleteRandomTable);

        convertPdf.setText("Convert to PDF");
        convertPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertPdfActionPerformed(evt);
            }
        });
        TableMenu.add(convertPdf);

        menuBar.add(TableMenu);

        encounterMenu.setText("Encounter");
        encounterMenu.setEnabled(false);
        encounterMenu.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N

        updateEncounterButton.setText("Change Encounter");
        updateEncounterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEncounterButtonActionPerformed(evt);
            }
        });
        encounterMenu.add(updateEncounterButton);

        menuBar.add(encounterMenu);

        lookupCreatureButton.setText("Creature");
        lookupCreatureButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N

        listPathfinder.setText("Browse Pathfinder Creatures");
        listPathfinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPathfinderActionPerformed(evt);
            }
        });
        lookupCreatureButton.add(listPathfinder);

        customCreatureMenu.setText("Create/Edit Custom Creature");
        customCreatureMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customCreatureMenuActionPerformed(evt);
            }
        });
        lookupCreatureButton.add(customCreatureMenu);

        menuBar.add(lookupCreatureButton);

        quitButton.setText("Exit");
        quitButton.setFont(new java.awt.Font("Papyrus", 1, 11)); // NOI18N

        quitMenu.setText("Quit");
        quitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuActionPerformed(evt);
            }
        });
        quitButton.add(quitMenu);

        menuBar.add(quitButton);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dieRollLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tableNameLabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(notesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tableNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dieRollLabel)
                            .addComponent(nameLabel)
                            .addComponent(notesLabel))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(802, 659));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void listRandomTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRandomTableActionPerformed
        // Retrieve a table thats allready created
        try {
            String tName = JOptionPane.showInputDialog(this, "Enter the Table Name: ");
            if (tName == null) {
                JOptionPane.showMessageDialog(this, "Table listing canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else if (!tName.matches("^[a-zA-Z0-9 ]+$") || "table".equals(tName) || "bestiary1".equals(tName) || "custombestiary".equals(tName)) {
                JOptionPane.showMessageDialog(this, "Please enter a correct name!", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else {
                // Check if table is not there
                Connector conn = new Connector();
                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                ArrayList tableNames = conn.tableMetaData();
                if (!tableNames.contains(tName)) {
                    JOptionPane.showMessageDialog(this, "The Table does not exist", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    encounterMenu.setEnabled(true);
                    //Construct a table object
                    Table table = new Table();
                    table.setTableName(tName);
                    // query the table name
                    tableName.setText(tName);
                    Statement statement = conn.makeStatement();
                    String sqlst = "Select * FROM " + tName;
                    rs = statement.executeQuery(sqlst);
                    //append results to the table
                    outputArea.setText("");
                    nameOutput.setText("");
                    notesOutput.setText("");
                    while (rs.next()) {
                        String dieRoll = " ";
                        dieRoll = "\n" + rs.getInt("minDie") + " - " + rs.getInt("maxDie");
                        String creature = " ";
                        creature += "\n" + rs.getString("creature");
                        String notes = " ";
                        notes += "\n" + rs.getString("description");

                        outputArea.append(dieRoll);
                        nameOutput.append(creature);
                        notesOutput.append(notes);

                    }
                }
                conn.close();
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading the Table!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_listRandomTableActionPerformed

    private void addRandomTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRandomTableActionPerformed
        // Create a new table, first prompt for dialog box to request name of the table
        try {

            String tName = JOptionPane.showInputDialog(this, "Enter the new Random Table Name: ");
            if (tName == null) {
                JOptionPane.showMessageDialog(this, "Table creation canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else if (!tName.matches("^[a-zA-Z0-9 ]+$") || "table".equals(tName)) {
                JOptionPane.showMessageDialog(this, "Please enter a correct name!", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else {
                Table newTable = new Table();
                newTable.setTableName(tName);
                // Check if table is already created
                Connector conn = new Connector();
                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                ArrayList tableNames = conn.tableMetaData();
                if (tableNames.contains(tName)) {
                    JOptionPane.showMessageDialog(this, "The Table already exists", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    newTable.add();
                    JOptionPane.showMessageDialog(this, "Random Table Added", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
                conn.close();
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "The Table already exists or has been canceled", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addRandomTableActionPerformed

    private void deleteRandomTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRandomTableActionPerformed
        // Delete a custom table from the database
        try {

            String tName = JOptionPane.showInputDialog(this, "Enter the Random Table Name: ");
            if (tName == null) {
                JOptionPane.showMessageDialog(this, "Table deletion canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else if (!tName.matches("^[a-zA-Z]+$") || "table".equals(tName) || "bestiary1".equals(tName) || "custombestiary".equals(tName)) {
                JOptionPane.showMessageDialog(this, "Please enter a correct name!", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else {
                Table newTable = new Table();
                newTable.setTableName(tName);
                // Check the table 
                Connector conn = new Connector();
                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                ArrayList tableNames = conn.tableMetaData();
                if (!tableNames.contains(tName)) {
                    JOptionPane.showMessageDialog(this, "The Table dosen't exist", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    Object[] options = {"Yes", "No"};
                    int choice;
                    choice = JOptionPane.showOptionDialog(this, "Are You Sure you Wish to Delete " + newTable.getTableName() + "? ", "Delete Confirm",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
                    if (choice == 0) {
                        newTable.delete();
                        JOptionPane.showMessageDialog(this, "Random Table Deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Table deletion canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
                    }
                }
                conn.close();
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteRandomTableActionPerformed

    private void updateEncounterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEncounterButtonActionPerformed
        // Remove or update an encounter from a table
        if ("".equals(tableName.getText())) {
            JOptionPane.showMessageDialog(this, "Must have a table preloaded to update an encounter!!", "Canceled", JOptionPane.ERROR_MESSAGE);
        } else {
            updateEncounterDialog.setVisible(true);

            // clear those textfields
            uMinRoll.setText("");
            uMaxRoll.setText("");
            uName.setText("");
            uNotes.setText("");
            // load up the current table resultset
            try {
                Connector conn = new Connector();
                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                Statement statement = conn.makeStatement();
                String sqlst = "Select * FROM " + tableName.getText();
                rs = statement.executeQuery(sqlst);
                // Check for en empty result set
                if (!rs.isBeforeFirst()) {
                    JOptionPane.showMessageDialog(updateEncounterDialog, "No entries found, enter one!", "Error", JOptionPane.ERROR_MESSAGE);
                    uForwardButton.setEnabled(false);
                    uBackButton.setEnabled(false);
                    uOkButton.setEnabled(false);
                    uAddEncounter.setEnabled(false);
                    uDeleteEncounter.setEnabled(false);
                    uUpdateEncounter.setEnabled(false);

                    uSaveEncounter.setEnabled(true);
                    uCancelEncounter.setEnabled(false);

                    uMinRoll.setText("");
                    uMaxRoll.setText("");
                    uName.setText("");
                    uNotes.setText("");
                } else {
                    // setup the default fields for the first record
                    rs.next();
                    int minDie = rs.getInt("minDie");
                    String MINDIE = Integer.toString(minDie);
                    int maxDie = rs.getInt("maxDie");
                    String MAXDIE = Integer.toString(maxDie);
                    String name = rs.getString("creature");
                    String notes = rs.getString("description");

                    uMinRoll.setText(MINDIE);
                    uMaxRoll.setText(MAXDIE);
                    uName.setText(name);
                    uNotes.setText(notes);

                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(updateEncounterDialog, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_updateEncounterButtonActionPerformed

    private void uForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uForwardButtonActionPerformed
        try {
            if (rs.next()) {
                int minDie = rs.getInt("minDie");
                String MINDIE = Integer.toString(minDie);
                int maxDie = rs.getInt("maxDie");
                String MAXDIE = Integer.toString(maxDie);
                String name = rs.getString("creature");
                String notes = rs.getString("description");

                uMinRoll.setText(MINDIE);
                uMaxRoll.setText(MAXDIE);
                uName.setText(name);
                uNotes.setText(notes);
            } else {
                rs.previous();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(updateEncounterDialog, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uForwardButtonActionPerformed

    private void uBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uBackButtonActionPerformed
        try {
            if (rs.previous()) {

                int minDie = rs.getInt("minDie");
                String MINDIE = Integer.toString(minDie);
                int maxDie = rs.getInt("maxDie");
                String MAXDIE = Integer.toString(maxDie);
                String name = rs.getString("creature");
                String notes = rs.getString("description");

                uMinRoll.setText(MINDIE);
                uMaxRoll.setText(MAXDIE);
                uName.setText(name);
                uNotes.setText(notes);
            } else {
                rs.next();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(updateEncounterDialog, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uBackButtonActionPerformed

    private void uUpdateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uUpdateEncounterActionPerformed
        String minDie = uMinRoll.getText();
        String maxDie = uMaxRoll.getText();
        if (!minDie.matches("[0-9]+") || (!maxDie.matches("[0-9]+"))) {
            JOptionPane.showMessageDialog(updateEncounterDialog, "Only numbers are allowed for die rolls!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Object[] options = {"Yes", "No"};
            int choice;
            choice = JOptionPane.showOptionDialog(updateEncounterDialog, "Are You Sure you Wish to update this encounter? ", "Delete Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
            if (choice == 0) {
                int MINDIE = Integer.parseInt(minDie);
                int MAXDIE = Integer.parseInt(maxDie);
                String name = uName.getText();
                String notes = uNotes.getText();

                try {
                    rs.updateInt("minDie", MINDIE);
                    rs.updateInt("maxDie", MAXDIE);
                    rs.updateString("creature", name);
                    rs.updateString("description", notes);
                    rs.updateRow();
                    JOptionPane.showMessageDialog(updateEncounterDialog, "Updated", "Updated", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(updateEncounterDialog, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(updateEncounterDialog, "Row update canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_uUpdateEncounterActionPerformed

    private void uDeleteEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uDeleteEncounterActionPerformed

        Object[] options = {"Yes", "No"};
        int choice;
        choice = JOptionPane.showOptionDialog(updateEncounterDialog, "Are You Sure you Wish to Delete this encounter? ", "Delete Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
        if (choice == 0) {
            try {
                rs.deleteRow();
                rs.close();
                Connector conn = new Connector();
                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                Statement statement = conn.makeStatement();
                String sqlst = "Select * FROM " + tableName.getText();
                rs = statement.executeQuery(sqlst);
                JOptionPane.showMessageDialog(updateEncounterDialog, "Deleted!");
                // setup the default fields for the first record
                // in case there are no records left
                if (!rs.isBeforeFirst()) {
                    JOptionPane.showMessageDialog(updateEncounterDialog, "No entries found, enter one!", "Error", JOptionPane.ERROR_MESSAGE);
                    uForwardButton.setEnabled(false);
                    uBackButton.setEnabled(false);
                    uOkButton.setEnabled(false);
                    uAddEncounter.setEnabled(false);
                    uDeleteEncounter.setEnabled(false);
                    uUpdateEncounter.setEnabled(false);

                    uSaveEncounter.setEnabled(true);
                    uCancelEncounter.setEnabled(false);

                    uMinRoll.setText("");
                    uMaxRoll.setText("");
                    uName.setText("");
                    uNotes.setText("");
                } else {
                    rs.next();
                    int MINDIE = rs.getInt("minDie");
                    int MAXDIE = rs.getInt("maxDie");
                    String name = rs.getString("creature");
                    String notes = rs.getString("description");
                    String minDie = String.valueOf(MINDIE);
                    String maxDie = String.valueOf(MAXDIE);

                    uMinRoll.setText(minDie);
                    uMaxRoll.setText(maxDie);
                    uName.setText(name);
                    uNotes.setText(notes);

                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_uDeleteEncounterActionPerformed

    private void uOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uOkButtonActionPerformed
        updateEncounterDialog.dispose();
        try {
            Table table = new Table();
            table.setTableName(tableName.getText());
            // query the table name
            Connector conn = new Connector();
            conn.setPASSWORD(pass);
            conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "Select * FROM " + table.getTableName();
            rs = statement.executeQuery(sqlst);
            //append results to the table
            outputArea.setText("");
            nameOutput.setText("");
            notesOutput.setText("");
            while (rs.next()) {
                String dieRoll = " ";
                dieRoll = "\n" + rs.getInt("minDie") + " - " + rs.getInt("maxDie");
                String creature = " ";
                creature += "\n" + rs.getString("creature");
                String notes = " ";
                notes += "\n" + rs.getString("description");

                outputArea.append(dieRoll);
                nameOutput.append(creature);
                notesOutput.append(notes);
            }
            rs.close();
            statement.close();
            conn.close();

        } catch (NumberFormatException | HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uOkButtonActionPerformed

    private void updateEncounterDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_updateEncounterDialogWindowClosing
        try {
            Table table = new Table();
            table.setTableName(tableName.getText());
            // query the table name
            Connector conn = new Connector();
            conn.setPASSWORD(pass);
            conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "Select * FROM " + table.getTableName();
            rs = statement.executeQuery(sqlst);
            //append results to the table
            outputArea.setText("");
            nameOutput.setText("");
            notesOutput.setText("");
            while (rs.next()) {
                String dieRoll = " ";
                dieRoll = "\n" + rs.getInt("minDie") + " - " + rs.getInt("maxDie");
                String creature = " ";
                creature += "\n" + rs.getString("creature");
                String notes = " ";
                notes += "\n" + rs.getString("description");

                outputArea.append(dieRoll);
                nameOutput.append(creature);
                notesOutput.append(notes);
            }
            rs.close();
            statement.close();
            conn.close();

        } catch (NumberFormatException | HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateEncounterDialogWindowClosing

    private void listPathfinderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPathfinderActionPerformed
        pathfinderDialog.setVisible(true);

        // clear those textfields
        pName.setText("");
        pCR.setText("");
        pAlignment.setText("");
        pType.setText("");
        pEnvior.setText("");
        pLink.setText("");

        // load up the current table resultset
        try {
            Connector conn = new Connector();
            conn.setPASSWORD(pass);
            conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "Select * FROM bestiary1";
            rs = statement.executeQuery(sqlst);

            // setup the default fields for the first record
            rs.next();
            String name = rs.getString("b1name");
            String cr = rs.getString("b1cr");
            String align = rs.getString("b1align");
            String type = rs.getString("b1type");
            String envior = rs.getString("b1envior");
            String link = rs.getString("b1link");

            pName.setText(name);
            pCR.setText(cr);
            pAlignment.setText(align);
            pType.setText(type);
            pEnvior.setText(envior);
            pLink.setText(link);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_listPathfinderActionPerformed

    private void pForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pForwardButtonActionPerformed
        try {
            if (rs.next()) {
                String name = rs.getString("b1name");
                String cr = rs.getString("b1cr");
                String align = rs.getString("b1align");
                String type = rs.getString("b1type");
                String envior = rs.getString("b1envior");
                String link = rs.getString("b1link");

                pName.setText(name);
                pCR.setText(cr);
                pAlignment.setText(align);
                pType.setText(type);
                pEnvior.setText(envior);
                pLink.setText(link);
            } else {
                rs.previous();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pForwardButtonActionPerformed

    private void pBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pBackButtonActionPerformed
        try {
            if (rs.previous()) {
                String name = rs.getString("b1name");
                String cr = rs.getString("b1cr");
                String align = rs.getString("b1align");
                String type = rs.getString("b1type");
                String envior = rs.getString("b1envior");
                String link = rs.getString("b1link");

                pName.setText(name);
                pCR.setText(cr);
                pAlignment.setText(align);
                pType.setText(type);
                pEnvior.setText(envior);
                pLink.setText(link);
            } else {
                rs.next();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pBackButtonActionPerformed

    private void pOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pOkButtonActionPerformed
        pathfinderDialog.dispose();
        try {
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pOkButtonActionPerformed

    private void pathfinderDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_pathfinderDialogWindowClosing
        pathfinderDialog.dispose();
        try {
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pathfinderDialogWindowClosing

    private void pLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pLinkMouseClicked
        try {
            // on click go  to the webpage in default browser
            String url = pLink.getText();
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_pLinkMouseClicked

    private void pSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pSearchActionPerformed
        try {
            Connector conn = new Connector();
                            conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "SELECT * from bestiary1 WHERE b1name LIKE '%" + pSearch.getText() + "%'";
            rs = statement.executeQuery(sqlst);


            //validate
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(pathfinderDialog, "No Record(s) found!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // parse initial search and reset's the rs set to the search criteria
                rs.next();
                String name = rs.getString("b1name");
                String cr = rs.getString("b1cr");
                String align = rs.getString("b1align");
                String type = rs.getString("b1type");
                String envior = rs.getString("b1envior");
                String link = rs.getString("b1link");

                pName.setText(name);
                pCR.setText(cr);
                pAlignment.setText(align);
                pType.setText(type);
                pEnvior.setText(envior);
                pLink.setText(link);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_pSearchActionPerformed

    private void cForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cForwardButtonActionPerformed
        try {
            if (rs.next()) {
                String name = rs.getString("cname");
                String cr = rs.getString("ccr");
                String align = rs.getString("calign");
                String type = rs.getString("ctype");
                String envior = rs.getString("cenvior");

                cName.setText(name);
                cCR.setText(cr);
                cAlignment.setText(align);
                cType.setText(type);
                cEnvior.setText(envior);
            } else {
                rs.previous();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cForwardButtonActionPerformed

    private void cBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBackButtonActionPerformed
        try {
            if (rs.previous()) {
                String name = rs.getString("cname");
                String cr = rs.getString("ccr");
                String align = rs.getString("calign");
                String type = rs.getString("ctype");
                String envior = rs.getString("cenvior");

                cName.setText(name);
                cCR.setText(cr);
                cAlignment.setText(align);
                cType.setText(type);
                cEnvior.setText(envior);
            } else {
                rs.next();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cBackButtonActionPerformed

    private void cOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cOkButtonActionPerformed
        customCreatureDialog.dispose();
        try {
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cOkButtonActionPerformed

    private void cSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSearchActionPerformed
        try {
            Connector conn = new Connector();
                            conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "SELECT * from custombestiary WHERE cname LIKE '%" + cSearch.getText() + "%'";
            rs = statement.executeQuery(sqlst);


            //validate
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(customCreatureDialog, "No Record(s) found!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // parse initial search and reset's the rs set to the search criteria
                rs.next();
                String name = rs.getString("cname");
                String cr = rs.getString("ccr");
                String align = rs.getString("calign");
                String type = rs.getString("ctype");
                String envior = rs.getString("cenvior");

                cName.setText(name);
                cCR.setText(cr);
                cAlignment.setText(align);
                cType.setText(type);
                cEnvior.setText(envior);

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cSearchActionPerformed

    private void customCreatureDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_customCreatureDialogWindowClosing
        customCreatureDialog.dispose();
        try {
            rs.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_customCreatureDialogWindowClosing

    private void customCreatureMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customCreatureMenuActionPerformed
        customCreatureDialog.setVisible(true);

        // clear those textfields
        cName.setText("");
        cCR.setText("");
        cAlignment.setText("");
        cType.setText("");
        cEnvior.setText("");

        // load up the current table resultset
        try {
            Connector conn = new Connector();
                            conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "Select * FROM custombestiary";
            rs = statement.executeQuery(sqlst);
            // If there is no entries in the result set, allow the user to enter the first one
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(customCreatureDialog, "No entries found, enter one!", "Error", JOptionPane.ERROR_MESSAGE);
                cForwardButton.setEnabled(false);
                cBackButton.setEnabled(false);
                cOkButton.setEnabled(false);
                cSearch.setEnabled(false);
                cAddCreature.setEnabled(false);
                cDeleteCreature.setEnabled(false);
                cUpdateCreature.setEnabled(false);

                cSaveCreature.setEnabled(true);

                cName.setText("");
                cCR.setText("");
                cAlignment.setText("");
                cType.setText("");
                cEnvior.setText("");
            } else {
                // setup the default fields for the first record
                rs.next();
                String name = rs.getString("cname");
                String cr = rs.getString("ccr");
                String align = rs.getString("calign");
                String type = rs.getString("ctype");
                String envior = rs.getString("cenvior");

                cName.setText(name);
                cCR.setText(cr);
                cAlignment.setText(align);
                cType.setText(type);
                cEnvior.setText(envior);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(customCreatureDialog, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_customCreatureMenuActionPerformed

    private void cAddCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cAddCreatureActionPerformed

        try {
            curRow = rs.getRow();
            cForwardButton.setEnabled(false);
            cBackButton.setEnabled(false);
            cOkButton.setEnabled(false);
            cSearch.setEnabled(false);
            cAddCreature.setEnabled(false);
            cDeleteCreature.setEnabled(false);
            cUpdateCreature.setEnabled(false);

            cSaveCreature.setEnabled(true);
            cCancelCreature.setEnabled(true);

            cName.setText("");
            cCR.setText("");
            cAlignment.setText("");
            cType.setText("");
            cEnvior.setText("");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cAddCreatureActionPerformed

    private void cCancelCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cCancelCreatureActionPerformed

        try {
            rs.absolute(curRow);
            cForwardButton.setEnabled(true);
            cBackButton.setEnabled(true);
            cOkButton.setEnabled(true);
            cSearch.setEnabled(true);
            cAddCreature.setEnabled(true);
            cDeleteCreature.setEnabled(true);
            cUpdateCreature.setEnabled(true);

            cSaveCreature.setEnabled(false);
            cCancelCreature.setEnabled(false);

            String name = rs.getString("cname");
            String cr = rs.getString("ccr");
            String align = rs.getString("calign");
            String type = rs.getString("ctype");
            String envior = rs.getString("cenvior");

            cName.setText(name);
            cCR.setText(cr);
            cAlignment.setText(align);
            cType.setText(type);
            cEnvior.setText(envior);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cCancelCreatureActionPerformed

    private void cSaveCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSaveCreatureActionPerformed
        try {

            String name = cName.getText();
            String ccr = cCR.getText();
            String alignment = cAlignment.getText();
            String type = cType.getText();
            String envior = cEnvior.getText();

            if (!name.matches("^[a-zA-Z0-9 ]+$") || !ccr.matches("^[a-zA-Z0-9]+$") || !alignment.matches("^[a-zA-Z0-9 ]+$")
                    || !type.matches("^[a-zA-Z0-9 ]+$") || !envior.matches("^[a-zA-Z0-9 ]+$")) {
                JOptionPane.showMessageDialog(customCreatureDialog, "All fields must be filled out", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                rs.moveToInsertRow();
                rs.updateString("cname", name);
                rs.updateString("ccr", ccr);
                rs.updateString("calign", alignment);
                rs.updateString("ctype", type);
                rs.updateString("cenvior", envior);
                rs.insertRow();
                rs.close();

                Connector conn = new Connector();
                                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                Statement statement = conn.makeStatement();
                String sqlst = "Select * FROM custombestiary";
                rs = statement.executeQuery(sqlst);

                // setup the default fields for the first record again
                // Double check if there are any records
                if (!rs.isBeforeFirst()) {
                    JOptionPane.showMessageDialog(customCreatureDialog, "No entries found, enter one!", "Error", JOptionPane.ERROR_MESSAGE);
                    cForwardButton.setEnabled(false);
                    cBackButton.setEnabled(false);
                    cOkButton.setEnabled(false);
                    cSearch.setEnabled(false);
                    cAddCreature.setEnabled(false);
                    cDeleteCreature.setEnabled(false);
                    cUpdateCreature.setEnabled(false);

                    cSaveCreature.setEnabled(true);

                    cName.setText("");
                    cCR.setText("");
                    cAlignment.setText("");
                    cType.setText("");
                    cEnvior.setText("");
                } else {
                    rs.next();
                    name = rs.getString("cname");
                    ccr = rs.getString("ccr");
                    alignment = rs.getString("calign");
                    type = rs.getString("ctype");
                    envior = rs.getString("cenvior");

                    cName.setText(name);
                    cCR.setText(ccr);
                    cAlignment.setText(alignment);
                    cType.setText(type);
                    cEnvior.setText(envior);

                    cForwardButton.setEnabled(true);
                    cBackButton.setEnabled(true);
                    cOkButton.setEnabled(true);
                    cSearch.setEnabled(true);
                    cAddCreature.setEnabled(true);
                    cDeleteCreature.setEnabled(true);
                    cUpdateCreature.setEnabled(true);

                    cSaveCreature.setEnabled(false);
                    cCancelCreature.setEnabled(false);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cSaveCreatureActionPerformed

    private void cDeleteCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDeleteCreatureActionPerformed
        Object[] options = {"Yes", "No"};
        int choice;
        choice = JOptionPane.showOptionDialog(customCreatureDialog, "Are You Sure you Wish to Delete this row? ", "Delete Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
        if (choice == 0) {
            try {
                rs.deleteRow();
                rs.close();
                Connector conn = new Connector();
                                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                Statement statement = conn.makeStatement();
                String sqlst = "Select * FROM custombestiary";
                rs = statement.executeQuery(sqlst);
                JOptionPane.showMessageDialog(customCreatureDialog, "Deleted!");
                // setup the default fields for the first record
                // in case there are no records left
                if (!rs.isBeforeFirst()) {
                    JOptionPane.showMessageDialog(customCreatureDialog, "No entries found, enter one!", "Error", JOptionPane.ERROR_MESSAGE);
                    cForwardButton.setEnabled(false);
                    cBackButton.setEnabled(false);
                    cOkButton.setEnabled(false);
                    cSearch.setEnabled(false);
                    cAddCreature.setEnabled(false);
                    cDeleteCreature.setEnabled(false);
                    cUpdateCreature.setEnabled(false);

                    cSaveCreature.setEnabled(true);

                    cName.setText("");
                    cCR.setText("");
                    cAlignment.setText("");
                    cType.setText("");
                    cEnvior.setText("");
                } else {
                    rs.next();
                    String name = rs.getString("cname");
                    String cr = rs.getString("ccr");
                    String align = rs.getString("calign");
                    String type = rs.getString("ctype");
                    String envior = rs.getString("cenvior");

                    cName.setText(name);
                    cCR.setText(cr);
                    cAlignment.setText(align);
                    cType.setText(type);
                    cEnvior.setText(envior);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else {
            JOptionPane.showMessageDialog(customCreatureDialog, "Row deletion canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cDeleteCreatureActionPerformed

    private void cUpdateCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cUpdateCreatureActionPerformed

        Object[] options = {"Yes", "No"};
        int choice;
        choice = JOptionPane.showOptionDialog(customCreatureDialog, "Are You Sure you Wish to Update this row? ", "Update Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, null);
        if (choice == 0) {
            String name = cName.getText();
            String cr = cCR.getText();
            String alignment = cAlignment.getText();
            String type = cType.getText();
            String envior = cEnvior.getText();

            try {
                rs.updateString("cname", name);
                rs.updateString("ccr", cr);
                rs.updateString("calign", alignment);
                rs.updateString("ctype", type);
                rs.updateString("cenvior", envior);
                rs.updateRow();


                JOptionPane.showMessageDialog(customCreatureDialog, "Updated!");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(customCreatureDialog, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(customCreatureDialog, "Row update canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cUpdateCreatureActionPerformed

    private void convertPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertPdfActionPerformed
        try {
            if ("".equals(tableName.getText())) {
                JOptionPane.showMessageDialog(this, "Must have a table preloaded to save as pdf!!", "Canceled", JOptionPane.ERROR_MESSAGE);
            } else {
                int returnVal = saveFile.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    String path = saveFile.getSelectedFile().getAbsolutePath();
                    String ext = ".pdf";
                    rs.close();   // close just in case
                    // Create the pdf writers
                    Document document = new Document(PageSize.LETTER, 50, 50, 50, 50);
                    PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(path + ext));
                    document.open();
                    // Instantiate a pdf table and setup the settings
                    PdfPTable pdfTable = new PdfPTable(3);
                    pdfTable.setWidthPercentage(100);
                    pdfTable.setSpacingBefore(20f);
                    // query the table name
                    Connector conn = new Connector();
                                    conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                    Statement statement = conn.makeStatement();
                    String sqlst = "Select * FROM " + tableName.getText();
                    rs = statement.executeQuery(sqlst);

                    // initial cells instatiation
                    PdfPCell cell1 = new PdfPCell(new Paragraph("Die Roll"));
                    PdfPCell cell2 = new PdfPCell(new Paragraph("Name"));
                    PdfPCell cell3 = new PdfPCell(new Paragraph("Additional Notes"));

                    // add the header of the cells
                    cell1.setHorizontalAlignment(Element.ALIGN_BOTTOM);
                    cell2.setHorizontalAlignment(Element.ALIGN_BOTTOM);
                    cell3.setHorizontalAlignment(Element.ALIGN_BOTTOM);
                    cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cell1.setBorder(Rectangle.NO_BORDER);
                    cell2.setBorder(Rectangle.NO_BORDER);
                    cell3.setBorder(Rectangle.NO_BORDER);

                    pdfTable.addCell(cell1);
                    pdfTable.addCell(cell2);
                    pdfTable.addCell(cell3);
                    while (rs.next()) {
                        String dieRoll = "";
                        dieRoll += "" + rs.getInt("minDie") + " - " + rs.getInt("maxDie");
                        String creature = "";
                        creature += "" + rs.getString("creature");
                        String notes = " ";
                        notes += "" + rs.getString("description");

                        // Set the Cell settings for all three outputs
                        cell1 = new PdfPCell(new Paragraph(dieRoll));
                        cell2 = new PdfPCell(new Paragraph(creature));
                        cell3 = new PdfPCell(new Paragraph(notes));

                        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
                        cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
                        cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
                        cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                        //   cell1.setBorder(Rectangle.NO_BORDER);
                        //   cell2.setBorder(Rectangle.NO_BORDER);
                        //   cell3.setBorder(Rectangle.NO_BORDER);

                        pdfTable.addCell(cell1);
                        pdfTable.addCell(cell2);
                        pdfTable.addCell(cell3);

                    }
                    Paragraph title = new Paragraph();
                    Paragraph header = new Paragraph();
                    header.setAlignment(Element.ALIGN_CENTER);
                    header.add("EncounterPlus");
                    title.setAlignment(Element.ALIGN_CENTER);
                    title.setSpacingBefore(10f);
                    String pdfTitle = tableName.getText();
                    pdfTitle = pdfTitle.toUpperCase();
                    title.add(pdfTitle);
                    document.add(header);
                    document.add(title);
                    document.add(pdfTable);
                    document.close();
                    writer.flush();
                    conn.close();
                    rs.close();

                    // Open the pdf automatically
                    String openPdf = path + ext;
                    File file = new File(openPdf);
                    if (openPdf.toString().endsWith(".pdf")) {
                        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + openPdf);
                    } else {
                        // cross platform
                        Desktop desktop = Desktop.getDesktop();
                        desktop.open(file);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Save deletion canceled", "Canceled", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (DocumentException | FileNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(EncounterGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_convertPdfActionPerformed

    private void quitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuActionPerformed

    private void uAddEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uAddEncounterActionPerformed
        try {
            curRow = rs.getRow();
            uForwardButton.setEnabled(false);
            uBackButton.setEnabled(false);
            uOkButton.setEnabled(false);
            uAddEncounter.setEnabled(false);
            uDeleteEncounter.setEnabled(false);
            uUpdateEncounter.setEnabled(false);

            uSaveEncounter.setEnabled(true);
            uCancelEncounter.setEnabled(true);

            uMinRoll.setText("");
            uMaxRoll.setText("");
            uName.setText("");
            uNotes.setText("");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uAddEncounterActionPerformed

    private void uCancelEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uCancelEncounterActionPerformed
        try {
            rs.absolute(curRow);
            curRow = rs.getRow();
            uForwardButton.setEnabled(true);
            uBackButton.setEnabled(true);
            uOkButton.setEnabled(true);
            uAddEncounter.setEnabled(true);
            uDeleteEncounter.setEnabled(true);
            uUpdateEncounter.setEnabled(true);

            uSaveEncounter.setEnabled(false);
            uCancelEncounter.setEnabled(false);


            int MINDIE = rs.getInt("minDie");
            int MAXDIE = rs.getInt("maxDie");
            String name = rs.getString("creature");
            String notes = rs.getString("description");
            String minDie = String.valueOf(MINDIE);
            String maxDie = String.valueOf(MAXDIE);

            uMinRoll.setText(minDie);
            uMaxRoll.setText(maxDie);
            uName.setText(name);
            uNotes.setText(notes);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uCancelEncounterActionPerformed

    private void uSaveEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uSaveEncounterActionPerformed
        try {
            String MINDIE = uMinRoll.getText();
            String MAXDIE = uMaxRoll.getText();
            String name = uName.getText();
            String notes = uNotes.getText();


            if (!MINDIE.matches("^[0-9]+$") || !MAXDIE.matches("^[0-9]+$") || !name.matches("^[a-zA-Z0-9 ]+$")
                    || !notes.matches("^[a-zA-Z0-9 ]+$")) {
                JOptionPane.showMessageDialog(updateEncounterDialog, "All fields must be filled out", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int minDie = Integer.parseInt(MINDIE);
                int maxDie = Integer.parseInt(MAXDIE);
                rs.moveToInsertRow();
                rs.updateInt("minDie", minDie);
                rs.updateInt("maxDie", maxDie);
                rs.updateString("creature", name);
                rs.updateString("description", notes);
                rs.insertRow();
                rs.close();
            }
            Connector conn = new Connector();
                            conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
            Statement statement = conn.makeStatement();
            String sqlst = "Select * FROM " + tableName.getText();
            rs = statement.executeQuery(sqlst);
            // Check for empty records
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(customCreatureDialog, "No entries found, enter one!", "Error", JOptionPane.ERROR_MESSAGE);
                uForwardButton.setEnabled(false);
                uBackButton.setEnabled(false);
                uOkButton.setEnabled(false);
                uAddEncounter.setEnabled(false);
                uDeleteEncounter.setEnabled(false);
                uUpdateEncounter.setEnabled(false);

                uSaveEncounter.setEnabled(true);
                uCancelEncounter.setEnabled(false);

                uMinRoll.setText("");
                uMaxRoll.setText("");
                uName.setText("");
                uNotes.setText("");
            } else {
                rs.next();
                int minDie = rs.getInt("minDie");
                MINDIE = Integer.toString(minDie);
                int maxDie = rs.getInt("maxDie");
                MAXDIE = Integer.toString(maxDie);
                name = rs.getString("creature");
                notes = rs.getString("description");

                uMinRoll.setText(MINDIE);
                uMaxRoll.setText(MAXDIE);
                uName.setText(name);
                uNotes.setText(notes);

                uForwardButton.setEnabled(true);
                uBackButton.setEnabled(true);
                uOkButton.setEnabled(true);
                uAddEncounter.setEnabled(true);
                uDeleteEncounter.setEnabled(true);
                uUpdateEncounter.setEnabled(true);

                uSaveEncounter.setEnabled(false);
                uCancelEncounter.setEnabled(false);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uSaveEncounterActionPerformed

    private void listTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listTablesActionPerformed
        // List all the tables in the database
        listTablesDialog.setVisible(true);
        randomTablesListArea.setText("");
        try {
            Connector conn;
            conn = new Connector();
                            conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
            ArrayList tableNames = conn.tableMetaData();
            tableNames.remove("bestiary1");
            tableNames.remove("custombestiary");
            for (int i = 0; i < tableNames.size(); i++) {
                String names = tableNames.get(i).toString();
                randomTablesListArea.append("\n" + names);
            }

            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
        }



    }//GEN-LAST:event_listTablesActionPerformed

    private void listOkayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listOkayButtonActionPerformed
        listTablesDialog.dispose();
    }//GEN-LAST:event_listOkayButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        databaseDialog.setVisible(true);
    }//GEN-LAST:event_formWindowOpened

    private void passwordCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordCancelActionPerformed
        System.exit(0);
    }//GEN-LAST:event_passwordCancelActionPerformed

    private void passwordOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordOkActionPerformed
        char[] password = databasePassword.getPassword();
        if (password == null) {
            JOptionPane.showMessageDialog(databaseDialog, "No Password entered", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                for (int i = 0; i < password.length; i++) {
                    pass = pass + password[i];
                }

                Connector conn = new Connector();
                conn.setPASSWORD(pass);
                conn.connectDatabase(conn.getPASSWORD());
                conn.close();
                databaseDialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "An error has been encountered!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_passwordOkActionPerformed

    private void databaseDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_databaseDialogWindowClosing
          System.exit(0);
    }//GEN-LAST:event_databaseDialogWindowClosing

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncounterGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncounterGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu TableMenu;
    private javax.swing.JMenuItem addRandomTable;
    private javax.swing.JButton cAddCreature;
    private javax.swing.JTextField cAlignment;
    private javax.swing.JButton cBackButton;
    private javax.swing.JTextField cCR;
    private javax.swing.JButton cCancelCreature;
    private javax.swing.JButton cDeleteCreature;
    private javax.swing.JTextField cEnvior;
    private javax.swing.JButton cForwardButton;
    private javax.swing.JTextField cName;
    private javax.swing.JButton cOkButton;
    private javax.swing.JButton cSaveCreature;
    private javax.swing.JTextField cSearch;
    private javax.swing.JTextField cType;
    private javax.swing.JButton cUpdateCreature;
    private javax.swing.JMenuItem convertPdf;
    private javax.swing.JDialog customCreatureDialog;
    private javax.swing.JMenuItem customCreatureMenu;
    private javax.swing.JDialog databaseDialog;
    private javax.swing.JPasswordField databasePassword;
    private javax.swing.JMenuItem deleteRandomTable;
    private javax.swing.JLabel dieRollLabel;
    private javax.swing.JMenu encounterMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton listOkayButton;
    private javax.swing.JMenuItem listPathfinder;
    private javax.swing.JMenuItem listRandomTable;
    private javax.swing.JMenuItem listTables;
    private javax.swing.JDialog listTablesDialog;
    private javax.swing.JMenu lookupCreatureButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextArea nameOutput;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JTextArea notesOutput;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JTextField pAlignment;
    private javax.swing.JButton pBackButton;
    private javax.swing.JTextField pCR;
    private javax.swing.JTextField pEnvior;
    private javax.swing.JButton pForwardButton;
    private javax.swing.JTextField pLink;
    private javax.swing.JTextField pName;
    private javax.swing.JButton pOkButton;
    private javax.swing.JTextField pSearch;
    private javax.swing.JTextField pType;
    private javax.swing.JButton passwordCancel;
    private javax.swing.JButton passwordOk;
    private javax.swing.JDialog pathfinderDialog;
    private javax.swing.JMenu quitButton;
    private javax.swing.JMenuItem quitMenu;
    private javax.swing.JTextArea randomTablesListArea;
    private javax.swing.JFileChooser saveFile;
    private javax.swing.JDialog saveFileDialog;
    private javax.swing.JTextField tableName;
    private javax.swing.JLabel tableNameLabel;
    private javax.swing.JButton uAddEncounter;
    private javax.swing.JButton uBackButton;
    private javax.swing.JButton uCancelEncounter;
    private javax.swing.JButton uDeleteEncounter;
    private javax.swing.JButton uForwardButton;
    private javax.swing.JTextField uMaxRoll;
    private javax.swing.JTextField uMinRoll;
    private javax.swing.JTextField uName;
    private javax.swing.JTextField uNotes;
    private javax.swing.JButton uOkButton;
    private javax.swing.JButton uSaveEncounter;
    private javax.swing.JButton uUpdateEncounter;
    private javax.swing.JMenuItem updateEncounterButton;
    private javax.swing.JDialog updateEncounterDialog;
    // End of variables declaration//GEN-END:variables
}
